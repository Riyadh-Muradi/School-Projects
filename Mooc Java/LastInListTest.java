import fi.helsinki.cs.tmc.edutestutils.MockStdio;
import fi.helsinki.cs.tmc.edutestutils.Points;
import fi.helsinki.cs.tmc.edutestutils.ReflectionUtils;
import java.lang.reflect.Method;
import java.util.NoSuchElementException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.junit.*;
import static org.junit.Assert.*;

@Points("03-05")
public class LastInListTest {

    @Rule
    public MockStdio io = new MockStdio();

    @Test
    public void test() {
        // Array of input scenarios, each containing an array of strings
        String[][] input = {
            {"Thomas", "Elizabeth", "Axel", "Mary", "", "Mary"},
            {"Elizabeth", "Mary", "Axel", "", "Axel"},
            {"First", "Second", "Third", "Fourth", "Fifth", "Sixth", "Seventh", "", "Seventh"}
        };

        // Loop through each input scenario and run the check method
        for (int i = 0; i < input.length; i++) {
            check(input[i]);
        }
    }

    private void check(String... strings) {
        int oldOut = io.getSysOut().length();

        String in = "";
        // Construct the input string by concatenating strings with line breaks
        for (int i = 0; i < strings.length - 1; i++) {
            in += strings[i] + "\n";
        }

        // Set the input for the program using MockStdio
        io.setSysIn(in);
        // Call the main method of LastInList class
        callMain(LastInList.class);
        // Get the output generated by the program
        String out = io.getSysOut().substring(oldOut);

        // Ensure that the program is printing something
        assertTrue("you're not printing anything!", out.length() > 0);

        // Get the last word from the output
        String[] result = getLastWords(out);
        String lastWord = strings[strings.length - 1];

        // Check if the last word is correctly printed and no other words are printed
        for (int i = 0; i < strings.length - 1; i++) {
            String name = strings[i];
            if (name.equals(lastWord)) {
                continue;
            }

            if (name.equals("")) {
                continue;
            }

            if (out.contains(name)) {
                fail("Input:\n" + in + "\noutput was not expected to be \"" + name + "\".\nOutput was:\n" + out);
            }
        }

        // Create an error message for assertion
        String errorMsg = "Input:\n" + in + "\n\n Expected output:\n" + lastWord + "\nyou printed: \"" + result + "\"\n";
        // Check if the last word in the output matches the expected last word
        assertEquals(errorMsg, lastWord, result[0]);
    }

    private void callMain(Class kl) {
        try {
            kl = ReflectionUtils.newInstanceOfClass(kl);
            String[] t = null;
            String x[] = new String[0];
            // Get the main method of the provided class
            Method m = ReflectionUtils.requireMethod(kl, "main", x.getClass());
            // Invoke the main method with empty arguments
            ReflectionUtils.invokeMethod(Void.TYPE, m, null, (Object) x);
        } catch (NoSuchElementException e) {
            // Catch the case where the program tries to read too much input
            fail("Your program tried to read too much input. Remember to use nextLine() method to read!");
        } catch (Throwable e) {
            // Catch any other unexpected errors during program execution
            fail("Something unexpected happened. The public static void main(String[] args) method of '" + kl + "' class has disappeared \n"
            + "or something unexpected happened. More info: " + e);
        }
    }

    private static String[] getLastWords(String inputStr) {
        // Split the input string into words using spaces as separators
        String[] palat = inputStr.split("\\s+");
        // Return an array containing only the last word
        return new String[]{palat[palat.length - 1]};
    }
}
